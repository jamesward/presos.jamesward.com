amends "package://pkg.pkl-lang.org/github.com/aws-cloudformation/cloudformation-pkl/cloudformation@0.1.4#/template.pkl"
import "package://pkg.pkl-lang.org/github.com/aws-cloudformation/cloudformation-pkl/cloudformation@0.1.4#/cloudformation.pkl" as cfn
import "package://pkg.pkl-lang.org/github.com/aws-cloudformation/cloudformation-pkl/cloudformation@0.1.4#/aws/s3/bucket.pkl" as bucket
import "package://pkg.pkl-lang.org/github.com/aws-cloudformation/cloudformation-pkl/cloudformation@0.1.4#/aws/iam/role.pkl" as role
import "package://pkg.pkl-lang.org/github.com/aws-cloudformation/cloudformation-pkl/cloudformation@0.1.4#/aws/codepipeline/pipeline.pkl" as codepipelinePipeline
import "package://pkg.pkl-lang.org/github.com/aws-cloudformation/cloudformation-pkl/cloudformation@0.1.4#/aws/codestarconnections/connection.pkl" as codestarconnectionsConnection
import "package://pkg.pkl-lang.org/github.com/aws-cloudformation/cloudformation-pkl/cloudformation@0.1.4#/aws/codebuild/project.pkl" as codebuildProject

import "../cfn-extras/src/patterns.pkl" as patterns

// Rules {
//   ["only-us-east-1"] {
//     Assertions {
//       new {
//         Assert = cfn.Equals(cfn.Ref("AWS::Region"), "us-east-1")
//         AssertDescription = """
//           This template can only be deployed in the us-east-1 region.
//
//           This is because the ACM Certificate must be created in us-east-1
//           """
//       }
//     }
//   }
// }

// todo: creating the hostedzone, assigns dns servers which must be set on the domain name
//   https://stackoverflow.com/questions/76645024/cdk-deploy-is-stuck-on-awscertificatemanagercertificate-because-of-nameserve

local jamesWard = new patterns.Contact {
  firstName = "James"
  lastName = "Ward"
  type = "PERSON"
  addressLine1 = "PO Box 4202"
  city = "Crested Butte"
  state = "CO"
  countryCode = "US"
  zipCode = 81224
  phoneNumber = "+1.3035551212"
  email = "james@jamesward.com"
}

local jameswardmeDomain = new patterns.Domain {
  domainName {
    name = "presos.jamesward.me"
  }
  contact = jamesWard
}

local jameswardmeWebSite = new patterns.WebSite {
  domainName = jameswardmeDomain.domainName
  redirects {
    new {
      root = true
      url = "https://jamesward.com/presos/"
    }

    new {
      trailingSlash = true
      ammed = "index.html"
    }
  }
}


Resources {
  ...patterns.registerDomainCustomResource
  ...jameswardmeDomain.resources
  ...jameswardmeWebSite.resources

  // todo: maybe for static sites we don't need the intermediate bucket?
  ["CodePipelineBucket"] = new bucket.Bucket {

  }

  ["CodePipelineRole"] = new role.Role {
    AssumeRolePolicyDocument {
      Version = "2012-10-17"
      Statement {
        Effect = "Allow"
        Principal {
          Service = "codepipeline.amazonaws.com"
        }
        Action = "sts:AssumeRole"
      }
    }
    Policies {
      new {
        PolicyName = "CodePipelinePolicy"
        PolicyDocument {
          Version = "2012-10-17"
          Statement = new Listing {
            new {
              Effect = "Allow"
              Action = new Listing {
                "s3:GetObject"
                "s3:GetObjectVersion"
                "s3:GetBucketVersioning"
                "s3:PutObject"
              }
              Resource = new Listing {
                cfn.GetAtt("CodePipelineBucket", "Arn")
                cfn.Sub("${CodePipelineBucket.Arn}/*")
              }
            }
            new {
              Effect = "Allow"
              Action = new Listing {
                "s3:PutObject"
              }
              Resource = new Listing {
                cfn.GetAtt(jameswardmeWebSite.bucket, "Arn")
                cfn.Sub("${\(jameswardmeWebSite.bucket).Arn}/*")
              }
            }
            new {
              Effect = "Allow"
              Action = new Listing {
                "codebuild:BatchGetBuilds"
                "codebuild:StartBuild"
              }
              Resource = new Listing {
                "*" // todo: more restricted?
              }
            }
            new {
              Effect = "Allow"
              Action = new Listing {
                "codestar-connections:UseConnection"
              }
              Resource = new Listing {
                cfn.Ref("GitHubConnection")
              }
            }
          }
        }
      }
    }
  }

  ["GitHubConnection"] = new codestarconnectionsConnection.Connection {
    ConnectionName = cfn.Ref("AWS::StackName")
    ProviderType = "GitHub"
  }

  ["CodeBuildRole"] = new role.Role {
    AssumeRolePolicyDocument {
      Version = "2012-10-17"
      Statement {
        Effect = "Allow"
        Principal {
          Service = "codebuild.amazonaws.com"
        }
        Action = "sts:AssumeRole"
      }
    }
    ManagedPolicyArns {
      "arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess"
    }
    Policies {
      new {
        PolicyName = "CodeBuildLogsAndArtifacts"
        PolicyDocument {
          Version = "2012-10-17"
          Statement = new Listing {
            new {
              Effect = "Allow"
              Action = new Listing {
                "logs:CreateLogGroup"
                "logs:CreateLogStream"
                "logs:PutLogEvents"
              }
              Resource = new Listing {
                cfn.Sub("arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*") // todo: can we reference the specific log-stream without a circular reference?
              }
            }
            new {
              Effect = "Allow"
              Action = new Listing {
                "s3:GetObject"
                "s3:PutObject"
              }
              Resource = new Listing {
                cfn.Sub("${CodePipelineBucket.Arn}/*")
              }
            }
          }
        }
      }
    }
  }

  ["CodeBuildProject"] = new codebuildProject.Project {
    Artifacts {
      Type = "CODEPIPELINE" // to enum?
    }
    Environment {
      ComputeType = "BUILD_GENERAL1_SMALL"
      Image = "aws/codebuild/standard:5.0"
      Type = "LINUX_CONTAINER"
    }
    ServiceRole = cfn.GetAtt("CodeBuildRole", "Arn")
    Source {
      Type = "CODEPIPELINE"
      BuildSpec = """
        version: 0.2
        env:
            git-credential-helper: yes
        phases:
            pre_build:
                commands:
                    - ls -alt
            build:
                commands:
                    - git submodule update --init --recursive
        artifacts:
            files:
                - '**/*'
            exclude-paths:
                - '**/.git'
                - '**/.gitignore'
                - '**/.gitmodules'
        """
    }
  }

  ["CodePipeline"] = new codepipelinePipeline.Pipeline {
    RoleArn = cfn.GetAtt("CodePipelineRole", "Arn")
    ArtifactStore = new {
      Type = "S3"
      Location = cfn.Ref("CodePipelineBucket")
    }
    Stages {
      new {
        Name = "Source"
        Actions {
          new {
            Name = "SourceAction"
            ActionTypeId {
              Category = "Source"
              Owner = "AWS"
              Version = "1"
              Provider = "CodeStarSourceConnection"
            }
            OutputArtifacts {
              new {
                Name = "CloneOutput"
              }
            }
            Configuration {
              ConnectionArn = cfn.Ref("GitHubConnection")
              FullRepositoryId = "jamesward/presos.jamesward.com"
              BranchName = "main"
              OutputArtifactFormat = "CODEBUILD_CLONE_REF"
            }
          }
        }
      }

      new {
        Name = "Build"
        Actions {
          new {
            Name = "CloneGitSubmodules"
            ActionTypeId {
              Category = "Build"
              Owner = "AWS"
              Version = "1"
              Provider = "CodeBuild"
            }
            Configuration {
              ProjectName = cfn.Ref("CodeBuildProject")
            }
            InputArtifacts {
              new {
                Name = "CloneOutput"
              }
            }
            OutputArtifacts {
              new {
                Name = "SourceOutput"
              }
            }
          }
        }
      }

      // todo: this should overwrite the bucket contents so any deleted files, go away
      new {
        Name = "Deploy"
        Actions {
          new {
            Name = "DeployAction"
            ActionTypeId {
              Category = "Deploy"
              Owner = "AWS"
              Version = "1"
              Provider = "S3"
            }
            InputArtifacts {
              new {
                Name = "SourceOutput"
              }
            }
            Configuration {
              BucketName = cfn.Ref(jameswardmeWebSite.bucket)
              Extract = true
            }
          }
        }
      }
    }
  }
}
