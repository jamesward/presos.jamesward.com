amends "package://pkg.pkl-lang.org/github.com/aws-cloudformation/cloudformation-pkl/cloudformation@0.1.3#/template.pkl"
import "package://pkg.pkl-lang.org/github.com/aws-cloudformation/cloudformation-pkl/cloudformation@0.1.3#/cloudformation.pkl" as cfn
import "package://pkg.pkl-lang.org/github.com/aws-cloudformation/cloudformation-pkl/cloudformation@0.1.3#/aws/route53/recordset.pkl" as recordset
import "package://pkg.pkl-lang.org/github.com/aws-cloudformation/cloudformation-pkl/cloudformation@0.1.3#/aws/route53/hostedzone.pkl" as hostedzone
import "package://pkg.pkl-lang.org/github.com/aws-cloudformation/cloudformation-pkl/cloudformation@0.1.3#/aws/s3/bucket.pkl" as bucket
import "package://pkg.pkl-lang.org/github.com/aws-cloudformation/cloudformation-pkl/cloudformation@0.1.3#/aws/s3/bucketpolicy.pkl" as bucketpolicy
import "package://pkg.pkl-lang.org/github.com/aws-cloudformation/cloudformation-pkl/cloudformation@0.1.3#/aws/cloudfront/distribution.pkl" as distribution
import "package://pkg.pkl-lang.org/github.com/aws-cloudformation/cloudformation-pkl/cloudformation@0.1.3#/aws/cloudfront/originaccesscontrol.pkl" as originaccesscontrol
import "package://pkg.pkl-lang.org/github.com/aws-cloudformation/cloudformation-pkl/cloudformation@0.1.3#/aws/cloudfront/function.pkl" as cloudfrontFunction
import "package://pkg.pkl-lang.org/github.com/aws-cloudformation/cloudformation-pkl/cloudformation@0.1.3#/aws/certificatemanager/certificate.pkl" as certificate
import "package://pkg.pkl-lang.org/github.com/aws-cloudformation/cloudformation-pkl/cloudformation@0.1.3#/aws/iam/role.pkl" as role
import "package://pkg.pkl-lang.org/github.com/aws-cloudformation/cloudformation-pkl/cloudformation@0.1.3#/aws/codepipeline/pipeline.pkl" as codepipelinePipeline
import "package://pkg.pkl-lang.org/github.com/aws-cloudformation/cloudformation-pkl/cloudformation@0.1.3#/aws/codestarconnections/connection.pkl" as codestarconnectionsConnection
import "package://pkg.pkl-lang.org/github.com/aws-cloudformation/cloudformation-pkl/cloudformation@0.1.3#/aws/codebuild/project.pkl" as codebuildProject

// Rules {
//   ["only-us-east-1"] {
//     Assertions {
//       new {
//         Assert = cfn.Equals(cfn.Ref("AWS::Region"), "us-east-1")
//         AssertDescription = """
//           This template can only be deployed in the us-east-1 region.
//
//           This is because the ACM Certificate must be created in us-east-1
//           """
//       }
//     }
//   }
// }

local domainname = "presos.jamesward.me"

// todo: creating the hostedzone, assigns dns servers which must be set on the domain name
//   https://stackoverflow.com/questions/76645024/cdk-deploy-is-stuck-on-awscertificatemanagercertificate-because-of-nameserve

Resources {
  // todo: registered domain because the dns servers have to be correct?
//
//   ["domain"] = new {
//     Type = "AWS::Route53::RegisteredDomain"
//     Properties = new Mapping {
//       ["DomainName"] = "jamesward.me"
//
//     }
//   }
//

  ["HostedZone"] = new hostedzone.HostedZone {
    Name = "jamesward.me"
  }

  ["RecordSetA"] = new recordset.RecordSet {
    HostedZoneId = cfn.Ref("HostedZone")
    Name = domainname
    TypeProperty = "A"
    AliasTarget {
      // The following HosteZoneId is always used for alias records pointing to CF.
      HostedZoneId = "Z2FDTNDATAQYW2"
      //HostedZoneId = cfn.GetAtt("Distribution", "HostedZoneId")
      DNSName = cfn.GetAtt("Distribution", "DomainName")
      EvaluateTargetHealth = false
    }
  }

  ["RecordSetAAAA"] = new recordset.RecordSet {
    HostedZoneId = cfn.Ref("HostedZone")
    Name = domainname
    TypeProperty = "AAAA"
    AliasTarget {
      // The following HosteZoneId is always used for alias records pointing to CF.
      HostedZoneId = "Z2FDTNDATAQYW2"
      //HostedZoneId = cfn.GetAtt("Distribution", "HostedZoneId")
      DNSName = cfn.GetAtt("Distribution", "DomainName")
      EvaluateTargetHealth = false
    }
  }

  ["Certificate"] = new certificate.Certificate {
    DomainName = domainname
    ValidationMethod = "DNS"
    // Adds the validation record to the hostedzone?
    DomainValidationOptions {
      new {
        DomainName = domainname
        HostedZoneId = cfn.Ref("HostedZone")
      }
    }
  }

  ["WebsiteBucket"] = new bucket.Bucket {
    BucketName = domainname
    AccessControl = "Private"
  }

  ["BucketPolicy"] = new bucketpolicy.BucketPolicy {
    Bucket = cfn.Ref("WebsiteBucket")
    PolicyDocument {
      Version = "2012-10-17"
      Statement {
        new {
          Action = "s3:GetObject"
          Principal {
            Service = "cloudfront.amazonaws.com"
          }
          Resource = cfn.Sub("arn:aws:s3:::${WebsiteBucket}/*")
          Effect = "Allow"
          Condition {
            StringEquals {
              `AWS:SourceArn` = cfn.Sub("arn:aws:cloudfront::${AWS::AccountId}:distribution/${Distribution.Id}")
            }
          }
        }
      }
    }
  }

  ["OriginAccessControl"] = new originaccesscontrol.OriginAccessControl {
    OriginAccessControlConfig {
      Name = "OriginAccessControl"
      OriginAccessControlOriginType = "s3"
      SigningBehavior = "always"
      SigningProtocol = "sigv4"
    }
  }

  // From: https://stackoverflow.com/a/75816672/77409
  ["DistributionFunction"] = new cloudfrontFunction.Function {
    Name = "RedirectDefaultIndexRequest"
    AutoPublish = true
    FunctionCode = """
      function handler(event) {
        var request = event.request;
        var uri = request.uri;

        // Check whether the URI is missing a file name.
        if (uri.endsWith('/')) {
          request.uri += 'index.html';
        }

        return request;
      }
      """
    FunctionConfig {
      Comment = "Redirect-Default-Index-Request"
      Runtime = "cloudfront-js-1.0"
    }
  }

  ["Distribution"] = new distribution.Distribution {
    DistributionConfig {
      Enabled = true
      DefaultRootObject = "index.html"
      DefaultCacheBehavior {
        AllowedMethods {
          "GET"
          "HEAD"
        }
        Compress = true
        DefaultTTL = 86400
        ForwardedValues {
          QueryString = true
        }
        MaxTTL = 31536000
        ViewerProtocolPolicy = "redirect-to-https"
        TargetOriginId = "WebOrigin"
        FunctionAssociations {
          new {
            EventType = "viewer-request"
            FunctionARN = cfn.GetAtt("DistributionFunction.FunctionMetadata", "FunctionARN")
          }
        }
      }
      HttpVersion = "http2"
      Aliases {
        domainname
      }
      ViewerCertificate {
        AcmCertificateArn = cfn.Ref("Certificate")
        SslSupportMethod = "sni-only"
      }
      Origins {
        new {
          Id = "WebOrigin"
          DomainName = cfn.GetAtt("WebsiteBucket", "RegionalDomainName")
          // it seems this must be specified but empty?
          S3OriginConfig { }
          OriginAccessControlId = cfn.GetAtt("OriginAccessControl", "Id")
        }
      }
    }
  }

  // todo: maybe for static sites we don't need the intermediate bucket?
  ["CodePipelineBucket"] = new bucket.Bucket {

  }

  ["CodePipelineRole"] = new role.Role {
    AssumeRolePolicyDocument {
      Version = "2012-10-17"
      Statement {
        Effect = "Allow"
        Principal {
          Service = "codepipeline.amazonaws.com"
        }
        Action = "sts:AssumeRole"
      }
    }
    Policies {
      new {
        PolicyName = "CodePipelinePolicy"
        PolicyDocument {
          Version = "2012-10-17"
          Statement = new Listing {
            new {
              Effect = "Allow"
              Action = new Listing {
                "s3:GetObject"
                "s3:GetObjectVersion"
                "s3:GetBucketVersioning"
                "s3:PutObject"
              }
              Resource = new Listing {
                cfn.GetAtt("CodePipelineBucket", "Arn")
                cfn.Sub("${CodePipelineBucket.Arn}/*")
              }
            }
            new {
              Effect = "Allow"
              Action = new Listing {
                "s3:PutObject"
              }
              Resource = new Listing {
                cfn.GetAtt("WebsiteBucket", "Arn")
                cfn.Sub("${WebsiteBucket.Arn}/*")
              }
            }
            new {
              Effect = "Allow"
              Action = new Listing {
                "codebuild:BatchGetBuilds"
                "codebuild:StartBuild"
              }
              Resource = new Listing {
                "*" // todo: more restricted?
              }
            }
            new {
              Effect = "Allow"
              Action = new Listing {
                "codestar-connections:UseConnection"
              }
              Resource = new Listing {
                cfn.Ref("GitHubConnection")
              }
            }
          }
        }
      }
    }
  }

  ["GitHubConnection"] = new codestarconnectionsConnection.Connection {
    ConnectionName = cfn.Ref("AWS::StackName")
    ProviderType = "GitHub"
  }

  ["CodeBuildRole"] = new role.Role {
    AssumeRolePolicyDocument {
      Version = "2012-10-17"
      Statement {
        Effect = "Allow"
        Principal {
          Service = "codebuild.amazonaws.com"
        }
        Action = "sts:AssumeRole"
      }
    }
    ManagedPolicyArns {
      "arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess"
    }
    Policies {
      new {
        PolicyName = "CodeBuildLogsAndArtifacts"
        PolicyDocument {
          Version = "2012-10-17"
          Statement = new Listing {
            new {
              Effect = "Allow"
              Action = new Listing {
                "logs:CreateLogGroup"
                "logs:CreateLogStream"
                "logs:PutLogEvents"
              }
              Resource = new Listing {
                cfn.Sub("arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*") // todo: can we reference the specific log-stream without a circular reference?
              }
            }
            new {
              Effect = "Allow"
              Action = new Listing {
                "s3:GetObject"
                "s3:PutObject"
              }
              Resource = new Listing {
                cfn.Sub("${CodePipelineBucket.Arn}/*")
              }
            }
          }
        }
      }
    }
  }

  ["CodeBuildProject"] = new codebuildProject.Project {
    Artifacts {
      Type = "CODEPIPELINE" // to enum?
    }
    Environment {
      ComputeType = "BUILD_GENERAL1_SMALL"
      Image = "aws/codebuild/standard:5.0"
      Type = "LINUX_CONTAINER"
    }
    ServiceRole = cfn.GetAtt("CodeBuildRole", "Arn")
    Source {
      Type = "CODEPIPELINE"
      BuildSpec = """
        version: 0.2
        env:
            git-credential-helper: yes
        phases:
            pre_build:
                commands:
                    - ls -alt
            build:
                commands:
                    - git submodule update --init --recursive
        artifacts:
            files:
                - '**/*'
            exclude-paths:
                - '**/.git'
                - '**/.gitignore'
                - '**/.gitmodules'
        """
    }
  }

  ["CodePipeline"] = new codepipelinePipeline.Pipeline {
    RoleArn = cfn.GetAtt("CodePipelineRole", "Arn")
    ArtifactStore = new {
      Type = "S3"
      Location = cfn.Ref("CodePipelineBucket")
    }
    Stages {
      new {
        Name = "Source"
        Actions {
          new {
            Name = "SourceAction"
            ActionTypeId {
              Category = "Source"
              Owner = "AWS"
              Version = "1"
              Provider = "CodeStarSourceConnection"
            }
            OutputArtifacts {
              new {
                Name = "CloneOutput"
              }
            }
            Configuration {
              ConnectionArn = cfn.Ref("GitHubConnection")
              FullRepositoryId = "jamesward/presos.jamesward.com"
              BranchName = "main"
              OutputArtifactFormat = "CODEBUILD_CLONE_REF"
            }
          }
        }
      }

      new {
        Name = "Build"
        Actions {
          new {
            Name = "CloneGitSubmodules"
            ActionTypeId {
              Category = "Build"
              Owner = "AWS"
              Version = "1"
              Provider = "CodeBuild"
            }
            Configuration {
              ProjectName = cfn.Ref("CodeBuildProject")
            }
            InputArtifacts {
              new {
                Name = "CloneOutput"
              }
            }
            OutputArtifacts {
              new {
                Name = "SourceOutput"
              }
            }
          }
        }
      }

      // todo: this should overwrite the bucket contents so any deleted files, go away
      new {
        Name = "Deploy"
        Actions {
          new {
            Name = "DeployAction"
            ActionTypeId {
              Category = "Deploy"
              Owner = "AWS"
              Version = "1"
              Provider = "S3"
            }
            InputArtifacts {
              new {
                Name = "SourceOutput"
              }
            }
            Configuration {
              BucketName = cfn.Ref("WebsiteBucket")
              Extract = true
            }
          }
        }
      }
    }
  }
}
